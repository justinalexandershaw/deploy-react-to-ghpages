name: 'Deploy react app to github pages'
description: 'This action will automate the process of building and depolying react app in gh-pages branch.'
author: 'justinalexandershaw'
branding:
  color: blue
  icon: truck
runs: 
  using: 'composite'
  steps: 
    # Clean install dependencies (https://docs.npmjs.com/cli/v7/commands/npm-ci)
    - run : echo "Installing dependencies..." && npm ci
      shell: bash
    # Build the react app
    - run : echo "Building react app..." && npm run build
      shell: bash
    # Bump the minor version of the react app and create a new tag
    - run : echo "Bumping minor version..." && npm version minor
      shell: bash
    # Configure the commit signature to come from github-actions
    - run : git config user.name github-actions
      shell: bash
    # Configure the commit signature with email github-actions@github.com
    - run : git config user.email github-actions@github.com
      shell: bash
    # Add all changes from the work-tree
    - run : git --work-tree build add --all
      shell: bash
    # Commit all changes (automatically deploys commit with the current version number via grep)
    - run : git commit -m "Automatically deploying v$(npm version | grep 'site' | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+[^']*")"
      shell: bash
    # Push the changes to the gh-pages branch
    - run : git push origin HEAD:gh-pages --force
      shell: bash

# About the grep (see more at https://semver.org/)
  # The grep has three parts which are piped into eachother with the vertical bar character. The
  # first part gets a list of all the packages and their versions and returns it in JSON format. The
  # second part finds the lines which contain the string 'site' (there should be only one). This 
  # produces a line such as {site: '0.4.0',} (minus the braces). The third part will match just the
  # version via another grep (-E for extended mode and -o to print only the match) which will
  # try to match any valid semantic versioning version id. Valid versions are of the form
  # MAJOR.MINOR.PATCH-pre.RELEASE+meta where the uppercase words represent non-negative integers, 
  # the pre is the pre-release identifier such as beta or alpha, and the meta tag is used
  # to describe the build. For example, 1.2.3-beta.4-justin-blob. The major, minor, and patch are
  # required and everything else is optional.
